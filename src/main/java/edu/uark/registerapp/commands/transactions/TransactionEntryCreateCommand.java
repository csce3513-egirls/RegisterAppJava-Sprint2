package edu.uark.registerapp.commands.transactions;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import edu.uark.registerapp.commands.ResultCommandInterface;
import edu.uark.registerapp.commands.exceptions.ConflictException;
import edu.uark.registerapp.commands.exceptions.UnprocessableEntityException;
import edu.uark.registerapp.models.entities.TransactionEntryEntity;
import edu.uark.registerapp.models.repositories.TransactionEntryRepository;
import edu.uark.registerapp.models.api.TransactionEntry;
@Service
public class TransactionEntryCreateCommand implements ResultCommandInterface<TransactionEntry> {
    @Override
	public TransactionEntry execute() {
		this.validateProperties();

		final TransactionEntryEntity createdTransactionEntryEntity = this.createTransactionEntryEntity();

		// Synchronize information generated by the database upon INSERT.
		this.apiTransactionEntry.setId(createdTransactionEntryEntity.getId()); 
		this.apiTransactionEntry.setCreatedOn(createdTransactionEntryEntity.getCreatedOn());

		return this.apiTransactionEntry;
    }

    // Helper methods
	private void validateProperties() {
        /*
		if (StringUtils.isBlank(this.apiTransactionEntry.getId())) {
			throw new UnprocessableEntityException("id");
		}*/
	}

	@Transactional
	private TransactionEntryEntity createTransactionEntryEntity() {
		final Optional<TransactionEntryEntity> queriedTransactionEntryEntity =
			this.transactionEntryRepository
				.findById(this.apiTransactionEntry.getId());

		if (queriedTransactionEntryEntity.isPresent()) {
			// Lookupcode already defined for another TransactionEntry.
			throw new ConflictException("lookupcode");
		}

		// No ENTITY object was returned from the database, thus the API object's
		// lookupcode must be unique.

		// Write, via an INSERT, the new record to the database.
		return this.transactionEntryRepository.save(
			new TransactionEntryEntity(apiTransactionEntry));
	}
    
    // Properties
	private TransactionEntry apiTransactionEntry;
	public TransactionEntry getApiTransactionEntry() {
		return this.apiTransactionEntry;
	}
	public TransactionEntryCreateCommand setApiTransactionEntry(final TransactionEntry apiTransactionEntry) {
		this.apiTransactionEntry = apiTransactionEntry;
		return this;
    }
    
    @Autowired
	private TransactionEntryRepository transactionEntryRepository;
}